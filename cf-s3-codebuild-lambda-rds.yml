AWSTemplateFormatVersion: 2010-09-09
Parameters:
  # S3 Parameters
  S3BucketName:
    Type: String
    Description: Name of S3 Bucket that will be created

  # CodeBuild Parameters
  GitHubRepo:
    Type: String
    Default: https://github.com/aleksandar-babic/vue-s3-demo
    Description: Github repository URL where SPA source code is located, default is https://github.com/aleksandar-babic/vue-s3-demo
  CodeBuildProjectName:
    Type: String
    Description: Name of CodeBuild project
  CodeBuildComputeType:
    Type: String
    Default: BUILD_GENERAL1_SMALL
    Description: Compute type for CodeBuild, default is BUILD_GENERAL1_SMALL
  CodeBuildEnvImage:
    Type: String
    Default: node:alpine
    Description: Environment image that will run in CodeBuild, default is node:alpine
  CodeBuildTimeout:
    Type: Number
    Default: 10
    Description: Timeout in mintues for CodeBuild, default is 10

  # ApiGateway/Lambda Parameters
  ApiGatewayStageName:
    Type: "String"
    Default: "v1"
    Description: Name of Api Gateway stage, default is v1
  LambdaFunctionName:
    Type: "String"
    Default: "fetch-data-function"
    Description: Name of Lambda function, default is fetch-data-function
  LambdaMemoryLimit:
    Type: Number
    Default: 128
    MinValue: 128
    MaxValue: 2048
    Description: Memory usage limit for lambda function, default is 128
  LambdaRuntime:
    Type: String
    Default: python2.7
    Description: Runtime that will Lambda function run in, default is python2.7
  LambdaTimeout:
    Type: Number
    Default: 10
    Description: Timeout in mintues for Lambda, default is 10

Outputs:
  S3BucketURL:
    Value: !GetAtt 
      - S3Bucket
      - WebsiteURL
    Description: URL for SPA hosted on S3

  S3BucketSecureURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - S3Bucket
          - DomainName
        - '/index.html'
    Description: Secure URL for SPA hosted on S3

  ApiGatewayInvokeURL:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}"
    Description: URL for API Gateway that will return RDS data

Resources:
  # S3 Bucket setup
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref S3BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
    DeletionPolicy: Retain

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: S3policy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket

  # Codebuild project setup
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodeBuildRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        -
          PolicyName: "CodeBuildAccessPolicies"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - 
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:ListObjects"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref S3Bucket
                    - /*
                    
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildProjectName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: !Ref CodeBuildComputeType
        Image: !Ref CodeBuildEnvImage
        EnvironmentVariables:
          -
            Name: S3_BUCKET_NAME
            Type: PLAINTEXT
            Value: !Ref S3BucketName
          -
            Name: VUE_APP_API_URL
            Type: PLAINTEXT
            Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}"
      Source:
        Location: !Ref GitHubRepo
        Type: GITHUB
      Triggers:
        Webhook: true
      TimeoutInMinutes: !Ref CodeBuildTimeout
  
  # ApiGateway/Lambda setup
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "rds-lambda-api"
      Description: "API that will have method to return RDS data"

  ApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "LambdaFunction.Arn"
      ResourceId: !GetAtt "ApiGateway.RootResourceId"
      RestApiId: !Ref "ApiGateway"

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiGatewayMethod"
    Properties:
      RestApiId: !Ref "ApiGateway"
      StageName: !Ref "ApiGatewayStageName"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            return {
              'body': '[{"id": 1, "title": "Todo 1"}, {"id": 2, "title": "Todo 2"}]',
              'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'OPTIONS,GET'
              },
              'statusCode': 200
            }
      Description: "Function that will fetch RDS data and return as JSON"
      FunctionName: !Ref "LambdaFunctionName"
      Handler: "index.handler"
      MemorySize: !Ref LambdaMemoryLimit
      Role: !GetAtt "LambdaIAMRole.Arn"
      Runtime: !Ref LambdaRuntime
      Timeout: !Ref LambdaTimeout

  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/"

  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*"
          PolicyName: "lambda"

  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 90